plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.flywaydb.flyway' version '8.3.0'
    id 'jacoco'
}

sourceCompatibility = 11
targetCompatibility = 11

group 'dev.ducketapp.service'
version '0.0.1'
application {
    mainClassName = "io.ktor.server.netty.EngineMain"

    def isDevelopment = project.ext.has("development")
    applicationDefaultJvmArgs = ["-Dio.ktor.development=$isDevelopment"]
}

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenCentral()
    maven { url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap") }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty("junit.jupiter.testinstance.lifecycle.default", "per_class")
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

tasks.named("shadowJar") {
    dependsOn tasks.named("test")
}

jacoco {
    toolVersion = "0.8.2"
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'io.ktor.server.netty.EngineMain'
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
    }
}

dependencies {
    // Server
    implementation "io.ktor:ktor-server-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-netty-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-auth-jwt:$ktor_version"
    implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-server-freemarker:$ktor_version"

    // Client
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"
    implementation "io.ktor:ktor-client-logging:$ktor_version"
    implementation "io.ktor:ktor-client-serialization:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
    implementation "io.ktor:ktor-serialization-kotlinx-xml:$ktor_version"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"

    // Database
    implementation "mysql:mysql-connector-java:$mysql_connector_version"
    implementation "com.zaxxer:HikariCP:$hikari_version"
    implementation "com.h2database:h2:$h2_version"
    implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-dao:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-java-time:$exposed_version"
    implementation "org.flywaydb:flyway-core:$flyway_version"
    implementation "org.flywaydb:flyway-mysql:$flyway_version" // otherwise FlywayException: Unsupported Database: MySQL 8.0

    // An implementation of SLF4J
    implementation "ch.qos.logback:logback-classic:$logback_version"

    // Serialization/deserialization
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

    // Metrics
    implementation "io.ktor:ktor-server-metrics-micrometer:$ktor_version"
    implementation "io.micrometer:micrometer-registry-prometheus:$prometheus_version"

    // Job Scheduler
    implementation "org.quartz-scheduler:quartz:$quartz_version"

    // DI
    implementation "io.insert-koin:koin-ktor:$koin_version"
    implementation "io.insert-koin:koin-logger-slf4j:$koin_version"

    // ML
    implementation "nz.ac.waikato.cms.weka:weka-stable:3.8.0"
    implementation "org.nield:kotlin-statistics:1.2.1"

    // Other
    implementation "org.valiktor:valiktor-core:$valiktor_version"
    implementation "org.mindrot:jbcrypt:$jbcrypt_version"
    implementation "org.threeten:threeten-extra:$threeten_version"
    implementation "org.jetbrains.kotlinx:dataframe:$dataframe_version"
    implementation "org.apache.commons:commons-text:1.5" // Levenshtein Distance algorithm
    implementation "org.ahocorasick:ahocorasick:0.4.0" // Aho-Corasick algorithm

    // allows us to test parts of our Ktor application without having to use the whole HTTP stack in the process
    testImplementation "io.ktor:ktor-server-tests-jvm:$ktor_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.testcontainers:mysql:$testcontainers_version"
    testImplementation "org.testcontainers:junit-jupiter:$testcontainers_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}
